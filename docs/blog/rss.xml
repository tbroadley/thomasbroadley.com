<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Thomas Broadley]]></title>
        <description><![CDATA[Blog posts by Thomas Broadley.]]></description>
        <link>https://thomasbroadley.com</link>
        <image>
            <url>https://thomasbroadley.com/blog/rss.png</url>
            <title>Thomas Broadley</title>
            <link>https://thomasbroadley.com</link>
        </image>
        <generator>RSS for Node</generator>
        <lastBuildDate>Sat, 27 Aug 2022 12:00:08 GMT</lastBuildDate>
        <atom:link href="https://thomasbroadley.com/blog/rss.xml" rel="self" type="application/rss+xml"/>
        <copyright><![CDATA[2020 Thomas Broadley]]></copyright>
        <language><![CDATA[en]]></language>
        <managingEditor><![CDATA[Thomas Broadley]]></managingEditor>
        <webMaster><![CDATA[Thomas Broadley]]></webMaster>
        <item>
            <title><![CDATA[Focusing is debugging for the brain]]></title>
            <description><![CDATA[<p>I’m working through <a href="https://www.lesswrong.com/s/qRxTKm7DAftSuTGvj">Hammertime</a>, a 30-day program of instrumental rationality exercises. Hammertime introduced me to a technique called Focusing via a LessWrong post called <a href="https://www.lesswrong.com/posts/PXqQhYEdbdAYCp88m/focusing-for-skeptics">“Focusing, for skeptics”</a>. The post’s version of Focusing involves:</p>
<ol>
<li>Thinking about a problem in your life</li>
<li>Paying attention to how your body feels when you’re thinking about the problem. Focusing calls this a <em>felt sense</em></li>
<li>Coming up with a <em>handle</em> for that felt sense: a word, image, or concept that points to it</li>
<li>Comparing the handle to the felt sense, paying attention to whether the handle feels right. If so, go back to step 3, narrowing down the handle, adding more description and nuance. If not, try step 3 with a new handle. Repeat!</li>
</ol>
<p>It struck me that this is how I debug a computer program. First, I gather all the information I can about the bug. What part of the code is it in? When the bug happens, what state is the program in? Gaining knowledge about a bug is like paying attention to a felt sense.</p>
<p>Then, I lean on my intuition to surface hypotheses—in essence, short sentences that point to the bug’s root cause. This is similar to coming up with a handle for a felt sense.</p>
<p>Finally, I compare each hypothesis against the data. I might fill in blanks in a hypothesis, tweak it to fit the data better, or throw it out entirely. This is like comparing a handle to a felt sense.</p>
<p>I’m good at debugging but not at Focusing. This makes sense, even though they’re similar skills. I have years of experience ingesting information about computer programs. I haven’t spent nearly as much time paying attention to how my body feels. (I haven’t meditated seriously for a couple of years, so I’m at least out of practice.) Plus, my accumulated coding knowledge fuels my bug intuition. It takes longer to come up with good handles for felt senses because I have less data on them.</p>
<p>One takeaway for me: when Focusing, I should leave behind any preconceived notions of how I feel about a problem. Just like how, when debugging, it’s easy to stay attached to an existing hypothesis, even when the data are against it.</p>]]></description>
            <link>https://thomasbroadley.com/blog/focusing-is-debugging-for-the-brain/</link>
            <guid isPermaLink="false">focusing-is-debugging-for-the-brain</guid>
            <pubDate>Fri, 20 May 2022 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Kill the Newsletter]]></title>
            <description><![CDATA[<p>I subscribe to about 100 RSS feeds and one email newsletter: Money Stuff. I wanted a way to receive Money Stuff in my RSS reader instead of in my inbox. Unfortunately, Bloomberg doesn't seem to offer an RSS feed for Money Stuff anymore.</p>
<p>I found a website called <a href="https://kill-the-newsletter.com/">Kill the Newsletter</a> that converts email newsletters into RSS feeds. For each newsletter you want to subscribe to, Kill the Newsletter gives you a brand-new, unique email address and Atom feed URL. You subscribe to the newsletter using the email address and add the feed to your RSS reader. When Kill the Newsletter receives a newsletter email, it converts the email into a post and adds it to the feed, so that it shows up in your reader.</p>
<p>One disadvantage is that my RSS reader doesn't refetch feeds very often. There's some delay between the newsletter being sent out and me receiving it, whereas I get a notification about the email version as soon as it lands in my inbox. My RSS reader does give me the ability to manually refresh a certain feed, which mostly addresses this issue.</p>
<p>Overall, Kill the Newsletter has worked well for me. I plan to use it for more newsletters in the future.</p>]]></description>
            <link>https://thomasbroadley.com/blog/kill-the-newsletter/</link>
            <guid isPermaLink="false">kill-the-newsletter</guid>
            <pubDate>Sun, 24 Apr 2022 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Mastering Workman]]></title>
            <description><![CDATA[<p>In <a href="../jumping-in-the-deep-end-with-workman">"Jumping in the deep end with Workman"</a>, I concluded:</p>
<blockquote>
<p>I intended to title this post "Mastering Workman", but I don't think I've reached mastery yet. Hopefully next time I report back I'll feel that way!</p>
</blockquote>
<p>I'm happy to say that I feel that way now! I just typed at 90 wpm in a typing test. Based on the previous post, that's just below or the same as my QWERTY typing speed in 2020. I'm close to typing at the speed of thought. Plus, my Vim skills are back to the same level.</p>
<p>I don't remember when my typing speed improved. Based on my progression when I started using Workman, it probably took a month or more to go from 70 wpm to 90.</p>
<p>Using Workman hasn't changed my life. My hands feel slightly less strained compared to using QWERTY, but that might be in my head. And my typing speed hasn't changed much.</p>
<p>While learning Workman, I successfully built a habit of capitalizing letters using the hand not typing the letter. For example, when typing a capital L, I use the left Shift key. For Q, I use right Shift. I also tried and failed to switch fingers for a few letters. For example, I started using my left pinky for Q, but reverted to my left ring finger.</p>
<p>I can no longer touch type using QWERTY. If I look at the keyboard while typing, I reach 60 wpm in a typing test. I might type faster in a real situation, though. In a typing test, it's more important to look at the screen, to see what to type next. In real life, I usually type my own ideas, not a set text.</p>
<p>Learning Workman wasn't worth the investment. I spent 15 minutes a day for 15 days practicing Workman using <a href="https://www.keybr.com">Keybr</a> and 15 minutes a day for roughly 30 days using <a href="https://www.typingclub.com">TypingClub</a>. That's only 11 hours. But my typing speed was slower for at least a month after starting to use Workman at work. That's a lot of lost productivity.</p>
<p>Now that I've mastered the Workman layout, though, I'll stick with it!</p>]]></description>
            <link>https://thomasbroadley.com/blog/mastering-workman/</link>
            <guid isPermaLink="false">mastering-workman</guid>
            <pubDate>Sat, 12 Feb 2022 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Editing inline code blocks]]></title>
            <description><![CDATA[<p>Notion's, Slack's, and Jira's WYSIWYG text editors behave differently when the cursor is at the end of an inline code block. A situation like:</p>
<pre><code>THIS IS A CODE BLOCK and this is not
                   ^
                   (cursor is after this character)
</code></pre>
<p>Notion's behaviour here is the most confusing. Sometimes, typed text will appear inside the code block. Sometimes, it'll appear outside. It's unclear to me what triggers the switch between these two behaviours.</p>
<p>Slack is consistent, but consistently hard to use. A cursor at the end of an inline code block is always considered to be inside the code block. If you want to type after the code block, you must move your cursor after the character just after the end of the block. This means, for example, that you can't easily take the text "<code>foo</code> bar" and edit it to "<code>foo</code>'s bar". To do so, you'd need to move your cursor after the space that comes before "bar", type "'s ", then remove the space before the apostrophe.</p>
<p>In contrast, Jira defines two possible cursor positions, one inside and one outside the inline code block. You can move back and forth between the two positions using the left and right arrow keys. And you can distinguish between the two cursor positions visually. I like this behaviour best because it's always clear where typed text will appear, but you still have flexibility to type inside our outside the code block.</p>
<p>As a programmer, I spend a small but meaningful amount of time editing inline code blocks in WYSIWYG editors. Doing this in Notion and Slack frustrates me. But whenever I do it in Jira, I'm glad someone at Atlassian thought through this experience.</p>]]></description>
            <link>https://thomasbroadley.com/blog/editing-inline-code-blocks/</link>
            <guid isPermaLink="false">editing-inline-code-blocks</guid>
            <pubDate>Tue, 11 Jan 2022 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Predictions on Twitch]]></title>
            <description><![CDATA[<p>Recently, I’ve spent more time than usual watching Twitch streams, partially because of <a href="https://help.twitch.tv/s/article/channel-points-predictions">Predictions</a>. On Twitch, viewers accumulate Channel Points by watching and interacting with a stream. Predictions lets streamers create events with outcomes that viewers can then bet on using Channel Points. For example, you could ask your viewers whether or not they think you’ll reach Grandmaster in League of Legends (LoL) today, or finish the pizza you’re eating.</p>
<p>Unfortunately, Predictions don’t make great prediction markets. You can’t switch your prediction, or even remove your bet. You can only increase your stake in the side you originally picked. Plus, streamers are meant to close Predictions before the predicted event has started. Finally, Predictions have a known time window for betting, but streamers can also manually close betting before the end of the window, so it’s risky to wait to get a sense of the odds.</p>
<p>I’m disappointed because Predictions seem liquid. On relatively small streams with a few hundred viewers, I’ve seen hundreds of thousands of channel points bet on each side of a Prediction. On the other hand, I’m not convinced most bets are rational - the odds sometimes swing wildly as longtime viewers bet large amounts of Channel Points.</p>
<p>So far, I’ve seen Predictions for:</p>
<ul>
<li>The outcome of a LoL game</li>
<li>An over/under on the number of kills a streamer will have in a LoL game</li>
<li>An over/under on the time required to finish a level in Super Mario Maker 2</li>
</ul>
<p>Predictions seem like a fun way to practice predicting the future, but none of these use cases is perfect for that. Optimally, the predicted events would be short but have known starting conditions that affect the outcome. Team composition and lane matchups change the probability of winning a LoL game, but it takes 20-40 minutes to find out the result. By contrast, a bullet chess game takes a couple of minutes to play, but the only starting condition is whether the streamer is playing as white or black. </p>
<p>One solution is to run multiple Predictions on an event. For example, I could start a LoL game, then run Predictions on whether I’ll get first blood, whether my team will take the first dragon, and so on. I’d need another person to help me run the Predictions during the game, though.</p>
<p>Perhaps I should start my own Twitch channel with suitable Predictions. As a streamer, I bet I could get some interesting information on my viewers’ under- or overconfidence using this feature.</p>]]></description>
            <link>https://thomasbroadley.com/blog/predictions-on-twitch/</link>
            <guid isPermaLink="false">predictions-on-twitch</guid>
            <pubDate>Mon, 25 Jan 2021 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Subtracting from the blob]]></title>
            <description><![CDATA[<p>I recently read a blog post called <a href="https://tynan.com/shapes">“What Shape are You?”</a>. It’s helped me understand my manager’s perspective on feedback and growth, and given me a new perspective on how to progress in my career. It has some good ideas that I didn’t fully understand at first, so I’m trying to clarify them here.</p>
<p>The article’s main premise is that creative work is subtractive: “you start with a mountain of stuff to get done, and by the time you're done, someone will have done all of it.” This metaphor is incomplete: Doing a task from the mountain isn’t the only kind of creative work. In fact, the mountain is more like an amorphous blob called “things that we could do”. It doesn’t only contain stuff that you know has to get done (at least to start with).</p>
<p>You can subtract from the blob in a few ways. The first step is to remove low-impact work from the blob and leave behind a set of high-impact problems. Then, you subtract from a particular problem to leave behind a clear solution. You erase more work from the solution to break it up into a set of necessary and sufficient tasks. Finally, you subtract each task by completing it. At the end of a project, you’ve subtracted all the work away, either by doing it or by deciding not to.</p>
<p>Let’s take this up a level or three. I work at a company called Faire. Our product and engineering team is organized into several pillars, each of which contains several cross-functional pods of five to ten people. For example, I’m a member of the Marketplace Success pod, which is part of the Brand pillar. My impression is that the subtraction process follows this structure:</p>
<p class="image">
  <img src="/blog/subtracting-from-the-blob/diagram.jpg" alt="The Faire leadership team transforms a blob labelled “things Faire could do” into three smaller blobs and some empty space. At the next level, the Brand pillar leadership team does the same thing to one of the smaller blobs. This continues until we reach a task labelled “homepage banner”, which gets completed by a product manager, designer, or developer.">
</p>
<p>(I had a lot of fun drawing these blobs.)</p>
<p>At each level, a leadership team starts with a blob called “things we could do”. They subtract from that blob, leaving a few smaller blobs. Then the next level of leadership subtracts further from each blob. Eventually we get to the level of individual problems and solutions. My teammates and I work together to break these into atomic tasks for product managers, designers, and developers. Finally, we complete those tasks. And at the end, the company’s subtracted everything away.</p>
<p>This is a bit simplified. Leadership at each level has some input into the process at other levels. But in general I’m not collaborating with the CTO to decompose a solution into tasks. There’s also a lot of inter-team collaboration that doesn’t show up here, but we can model that as two teams subtracting from the same blob. There might be another level between solutions and tasks, depending on the size of the problem. And this doesn’t account for changing requirements and priorities. I think that looks like adding back work that was previously subtracted.</p>
<hr>
<p>The thesis of the article is that employees succeed or fail based on the shape of the work they subtract from the blob. One failure mode is subtracting a weird, unexpected shape. Senior employees’ responsibilities are too complex for their managers to fully define or even understand. It’s up to the employee to figure out what it makes sense for them to work on. If they choose poorly, important work can go undone for a long time without anyone noticing.</p>
<p>This has a couple of personal implications. I should look for work that I’m not doing, but that I’m uniquely positioned to do or that everyone is expecting me to pick up. I have a strong suspicion such work exists. When I find it, I’ll probably need to give up work I’m currently doing that other people could also do.</p>
<p>This scares me. I expect it means I’ll spend less time coding and more time scoping, planning, and talking to people. I’m much more confident in my ability to do the former. But I know I can succeed at this challenge.</p>]]></description>
            <link>https://thomasbroadley.com/blog/subtracting-from-the-blob/</link>
            <guid isPermaLink="false">subtracting-from-the-blob</guid>
            <pubDate>Sat, 02 Jan 2021 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Misleading with percent changes of percentages]]></title>
            <description><![CDATA[<p>Imagine you’re reading the news and see this:</p>
<blockquote>
<p>This month, the unemployment rate increased by 2%.</p>
</blockquote>
<p>Assuming the unemployment rate last month was 10%, this has two possible meanings:</p>
<ol>
<li>The unemployment rate increased from 10% to 12%.</li>
<li>The unemployment rate increased from 10% to 10.2% (since 0.2% is 2% of 10%).</li>
</ol>
<p>That’s a big difference!</p>
<p>Authors can either emphasize or downplay the change by choosing one of these options. Say the unemployment rate increased from 10% to 12% because of a government policy. Supporters of the policy can claim it “only increased unemployment by 2%”. Detractors can instead say that “unemployment has gone up by 20%!” And because of filter bubbles, you’ll only hear one framing or the other and won’t notice the discrepancy.</p>
<p>I found <a href="https://math.libretexts.org/Courses/College_of_the_Canyons/Math_100%3A_Liberal_Arts_Mathematics_(Gavilan_and_Radtke)/02%3A_Mathematics_and_Numbers/2.03%3A_Deceptive_and_Misleading_Numbers#Percentages_of_Percentages">one source</a> that recommends describing the change from 10% to 12% as an increase of 2 percentage points, to differentiate between the two cases. But it doesn’t propose another way to express that a percentage increased by 2% relative to the previous percentage. “Increased by 2%” still sounds ambiguous to me.</p>
<p>To resolve that ambiguity, don’t interpret the change in whichever way confirms your existing beliefs. Go to the source and find the value of the statistic before and after the percent change. “Increased from 10% to 12%” leaves no room for confusion. If the article expresses percent changes of percentages in a different way, it might be trying to mislead you.</p>
<hr>
<p>Edit: Here's <a href="https://twitter.com/justsaysrisks">a Twitter account</a> that adds the percentage-point change to tweets that only mention the relative change. Thanks to Fabian Tamp for pointing this out!</p>]]></description>
            <link>https://thomasbroadley.com/blog/misleading-with-percent-changes-of-percentages/</link>
            <guid isPermaLink="false">misleading-with-percent-changes-of-percentages</guid>
            <pubDate>Mon, 12 Oct 2020 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Jumping in the deep end with Workman]]></title>
            <description><![CDATA[<p>I last documented my experience with the Workman keyboard layout in July. At the time I could type at a little over 50 wpm using it. I’d just made it the main keyboard layout on my personal computer, but hadn’t found a way to apply the layout to all programs. By practicing daily, I hoped to improve to a point where I’d feel comfortable using Workman at work too.</p>
<p>That didn’t really pan out. I quit regular typing practice a couple of weeks after publishing that post. I kept using Workman on my own computer, but would switch back to QWERTY when coding outside of work. And I never got around to trying it on my work computer. My goal to use Workman everywhere ended up on the back burner for a couple of months.</p>
<p>Until the end of September. I took a week off to <a href="../tags/rc-mini-7-2020">participate in a Recurse Center mini-batch</a> and decided to use the time to practice Workman. I wouldn’t use QWERTY for anything, not even coding. (Luckily, the weekend before RC, I found out how to enable Workman system-wide on Ubuntu! Note to self: Post the solution. If it was non-obvious to me, it’s non-obvious to someone else.)</p>
<p>That week, I spent more time than I would have liked fiddling with my <code>.vimrc</code>. I wanted to set up Vim to use QWERTY key locations in normal mode and Workman locations in insert mode, so my muscle memory wouldn’t immediately become useless. I installed a plugin but found a couple of bugs. I fixed one of them but lost patience with the other, so I started writing my own key mapping. For unknown reasons it didn’t work consistently. At this point, I was pretty tired of writing Vimscript. Plus, I was unconsciously using Workman key locations in normal mode half the time anyway. I decided to get rid of the key mapping and go cold turkey.</p>
<p>At the start, I made a lot of mistakes while inputting Vim commands and felt like I was coding much more slowly than before. Pairing was especially painful. It’s no fun to feel like you’re slowing down yourself <em>and</em> another person. In hindsight, though, I think I made a great decision! By the end of the week, I felt confident enough to start using Workman at work and haven’t looked back.</p>
<p>As a side effect, I’m no longer able to touch-type QWERTY. At least I think that’s true: I haven’t tried for more than a minute or two. But I’m not unhappy about it. I can still type 65-70 wpm in a typing test. That’s 20-30 wpm slower than QWERTY, but it’s high enough that it doesn’t seem to have an impact on my programming speed. So much of coding is selecting the right option from the autocomplete dropdown anyway.</p>
<p>I do miss the extra speed when writing a blog post or messaging someone, though. I don’t quite feel like I type at the speed of thought (although I don’t think I ever did). But with daily real-world practice I expect to eventually reach a typing speed I’m happy with.</p>
<p>I intended to title this post “Mastering Workman”, but I don't think I’ve reached mastery yet. Hopefully next time I report back I’ll feel that way!</p>]]></description>
            <link>https://thomasbroadley.com/blog/jumping-in-the-deep-end-with-workman/</link>
            <guid isPermaLink="false">jumping-in-the-deep-end-with-workman</guid>
            <pubDate>Fri, 09 Oct 2020 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Understanding quine-central: the source code]]></title>
            <description><![CDATA[<p>This is an explanation of the source code of <a href="https://github.com/dpiponi/quine-central"><code>quine-central</code></a>, a program that produces quine loops. A quine is a program that prints its own source code. A quine loop is an extension of the same concept to multiple programs. Each program prints the source code of the next program in the loop. If you follow the loop far enough, you get back to the program you started with!</p>
<p>This post's prequel (linked in the left arrow above this post) explains why the programs generated by <code>quine-central</code> are quine loops. This post mainly explains how <code>quine-central</code> generates those programs. It might be useful to read the sequel before reading this post, to understand the motivation behind some of the parts of this code. I've still tried to include that context where necessary.</p>
<p><code>quine-central</code> generates a quine loop containing programs in eleven different languages. For simplicity, this article usually only includes the code for generating programs in three languages: Haskell, JavaScript, and Racket.</p>
<p>First we define a type with an option for each language we want to generate quines for.</p>
<pre><code class="language-hs">data Languages = Haskell
               | Javascript
               | Racket
               | ...
</code></pre>
<p>Each program in the quine loop has two lines. The first line always defines a function <code>q</code> and the second line always calls that function. Let's start by generating the code for the second line of the output program, the call to <code>q</code>. In some languages we need to wrap this call in a main method. In others we can leave it at the top level.</p>
<p><code>defn</code> returns the portion of the second line before the arguments list, <code>endDefn</code> the portion after.</p>
<pre><code class="language-hs">-- Start the main part of program
defn Haskell = "main = q \""
defn Javascript  = "q(\""
defn Racket  = "(q \""
...

-- End main part of program
endDefn Haskell = "\""
endDefn Javascript   = "\");"
endDefn Racket   = "\")"
...
</code></pre>
<p>Note that each result of <code>defn</code> ends in a quotation mark while each result of <code>endDefn</code> starts with one. That's because each argument passed to <code>q</code> in the generated code is a string.</p>
<p>To separate each pair of arguments, we need a close quotation mark to mark the end of the first argument, the character that separates function arguments (a comma in most languages, a space in others), and an open quotation mark to mark the beginning of the next argument.</p>
<pre><code class="language-hs">divider Haskell = "\" \""
divider Javascript  = "\",\""
divider Racket  = "\" \""
...
</code></pre>
<p><code>driver</code> takes a language and a list of arguments, then generates the second line of the output program for that language. For example, <code>driver Haskell ["foo", "bar", "quux"]</code> returns a string containing <code>main = q "foo" "bar" "quux"</code>, <code>driver Javascript ["a", "b", "c", "d"]</code> one containing <code>"q("a", "b", "c", "d")</code>.</p>
<pre><code class="language-hs">driver l args = defn l ++
                intercalate (divider l) args ++
                endDefn l
</code></pre>
<p>Now let's generate the first line of the output program, the definition of <code>q</code>. In all languages except Perl, which has implicit function arguments, we'll name <code>q</code>'s arguments <code>a0</code>, <code>a1</code>, ... <code>a{n-1}</code> (where <code>{n-1}</code> is replaced with the number <code>n - 1</code>, one less than the number of languages in the loop).</p>
<p>The helper function <code>paramList'</code> takes the numbers <code>[0..n-1]</code> that should be added to the end of each argument, then builds an argument list for the variables <code>a0</code> to <code>a{n-1}</code> that we'll later insert into a definition of <code>q</code>. For example, <code>paramList Haskell 3 = "a0 a1 a2"</code> and <code>paramList Javascript 5</code> = <code>a0,a1,a2,a3,a4</code>. In C and Java we must explicitly specify that each argument is a string.</p>
<pre><code class="language-hs">paramList' Haskell = intercalate " " . map (\n -> "a" ++ show n)
paramList' Javascript = intercalate "," . map (\n -> "a" ++ show n)
paramList' Racket  = intercalate " " . map (\n -> "a" ++ show n)
paramList' C       = intercalate "," . map (\n -> "char *a" ++ show n)
...

-- Generate a list or arguments to a function such as "a0,a1,..."
paramList Perl _ = ""
paramList lang n = paramList' lang [0..n-1]
</code></pre>
<p>Now we need to take a detour. Let's look at the program that a simplified version of <code>quine-central</code> produces when Haskell is the only language in the loop:</p>
<pre><code class="language-hs">q a0=putStrLn $ a0++"\nmain = q \""++a0++"\""
main = q "q a0=putStrLn $ a0++"\nmain = q \""++a0++"\"""
</code></pre>
<p>This program won't compile because the string passed to <code>q</code> on the second line contains unescaped double quotes. Let's escape them:</p>
<pre><code class="language-hs">q a0=putStrLn $ a0++"\nmain = q \""++a0++"\""
main = q "q a0=putStrLn $ a0++\"\nmain = q \\\"\"++a0++\"\\\"\""
</code></pre>
<p>We could get <code>quine-central</code> to escape them for us. The problem is that this is no longer a quine. It prints:</p>
<pre><code class="language-hs">q a0=putStrLn $ a0++"
main = q \""++a0++"\""
main = q "q a0=putStrLn $ a0++"
main = q \""++a0++"\"""
</code></pre>
<p>Looks like we might need to replace <code>\n</code> with <code>\\n</code> on the second line. We don't want to print a real newline, just <code>\n</code>. If we make that change, the program prints:</p>
<pre><code class="language-hs">q a0=putStrLn $ a0++"\nmain = q \""++a0++"\""
main = q "q a0=putStrLn $ a0++"\nmain = q \""++a0++"\"""
</code></pre>
<p>Still not a quine! The first line of the output and source code are the same, but the second line lost most of its escaping.</p>
<p>The problem is that, when <code>q</code> prints <code>a0</code> for the second time, it doesn't re-escape the characters that were escaped on the second line of the original program. We could probably handle this by adding character escaping logic for each language, but I suspect the problem becomes even more complicated with multiple languages. For example, the Perl program wraps the arguments passed to <code>q</code> in single quotes. This means that we <em>don't</em> need to escape double quotes when printing that string in from other languages.</p>
<p><code>quine-central</code>'s author found a simpler solution: Don't print any characters that need to be escaped in the first place. Instead, <code>quine-central</code> prints code that builds a string by converting the ASCII codes for the characters in the string into characters, then joining those characters together. The <code>sequenceFromString</code> function generates this code. For example, <code>sequenceFromString Haskell "Hello, world\n" = "map toEnum [72,101,108,108,111,44,32,119,111,114,108,100,10]"</code>. Note how the result of <code>sequenceFromString</code> doesn't contain any characters that have to be escaped.</p>
<pre><code class="language-hs">-- Generate code to emit individual characters comprising string.
-- Used to eliminate escape character issues.
sequenceFromString Haskell s = "map toEnum [" ++ (intercalate "," $
    map (\c -> show (fromEnum c)) s) ++ "]"
sequenceFromString Javascript s = "process.stdout.write(String.fromCharCode.apply(null, [" ++
    (intercalate "," $ map (\c -> show (fromEnum c)) s) ++
    "]));"
sequenceFromString Racket s = "(display (bytes " ++
    (intercalate " " $ map (\c -> show (fromEnum c)) s) ++ "))"
...
</code></pre>
<p>Now let's build the body of <code>q</code>. <code>paramList</code> generated a list of parameters for <code>q</code>, called <code>a0</code> to <code>a{n-1}</code>. <code>arg</code> generates a string that references a given argument to <code>q</code>. In some languages, it generates a statement that prints <code>q</code>. In others, it just generates the variable name, because <code>q</code> will concatenate the variable's value to other strings before printing it. For example, <code>arg Javascript 3 = "process.stdout.write(a3)"</code>, while <code>arg Haskell 0 = "a0"</code>.</p>
<pre><code class="language-hs">-- Print the nth argument to a function
arg Haskell n = "a" ++ show n
arg Javascript n  = "process.stdout.write(a" ++ show n ++ ");"
arg Racket n  = "(display a" ++ show n ++ ")"
...
</code></pre>
<p><code>argDivide</code> creates a string representing some code in the language specified by its first argument. The code is a string containing the function argument separator in the language specified by its second argument. In languages where <code>sequenceFromString</code> generates code to print its argument, <code>argDivide</code> doesn't wrap the result of <code>sequenceFromString</code> in string concatenation operators, and does otherwise.</p>
<p>For example, consider <code>argDivide Haskell Javascript</code>. <code>divider Javascript = "\",\""</code> because, in JavaScript, we separate arguments passed to a function with commas. The quotation marks are to wrap the arguments in quotation marks, to make them strings. <code>sequenceFromString Haskell "\",\"" = "map toEnum [34,44,34]"</code>, so <code>argDivide Haskell Javascript = "++map toEnum [34,44,34]++"</code>. Note how, because of <code>sequenceFromString</code>, <code>"++map toEnum [34,44,34]++"</code> contains no characters that have to be escaped in a Haskell string.</p>
<pre><code class="language-hs">argDivide Haskell l = "++" ++
                      sequenceFromString Haskell (divider l) ++
                      "++"
argDivide Javascript l = sequenceFromString Javascript (divider l)
argDivide Racket l  = sequenceFromString Racket (divider l)
...
</code></pre>
<p><code>argList</code> uses <code>arg</code> and <code>argDivide</code> to generate code in <code>lang1</code> that prints the arguments to a call to <code>q</code> in <code>lang2</code>. For example, <code>argList Haskell Javascript 3 = "a1++map toEnum [34,44,34]++a2++map toEnum [34,44,34]++a0"</code>.</p>
<pre><code class="language-hs">argList lang1 lang2 n = intercalate (argDivide lang1 lang2) $
    map (arg lang1) ([1..n-1] ++ [0])
</code></pre>
<p><code>fromTo</code> prints the definition of <code>q</code> in the first language it's given. This <code>q</code> prints <code>a0</code>, then the second line of the quine program in the language <code>l</code> (<code>defn l</code>, then <code>argList _ l n</code>, then <code>endDefn l</code>). For example, <code>fromTo 3 Haskell Javascript = "q a0 a1 a2=putStrLn $ a0++map toEnum [10,114,40,34]++a1++map toEnum [34,44,34]++a2++map toEnum [34,44,34]++a0++map toEnum [34,41,59]"</code>. If we called this definition of <code>q</code> on "foo", "bar", and "quux", it would print:</p>
<pre><code class="language-js">foo
q("bar","quux","foo");
</code></pre>
<p>This looks a lot like the JavaScript program in the quine loop!</p>
<pre><code class="language-hs">fromTo n Haskell l = "q " ++ paramList Haskell n ++
                     "=putStrLn $ a0++" ++
                     sequenceFromString Haskell ("\n" ++ defn l) ++
                     "++" ++
                     argList Haskell l n ++
                     "++" ++ sequenceFromString Haskell (endDefn l)
fromTo n Javascript l = "function q(" ++
                        paramList Javascript n ++ ") {" ++
                        "process.stdout.write(a0);" ++
                        sequenceFromString Javascript ("\n" ++ defn l) ++
                        argList Javascript l n ++
                        sequenceFromString Javascript (endDefn l ++ "\n") ++
                        "};"
fromTo n Racket l = "(define (q " ++
                    paramList Racket n ++
                    ") (begin " ++
                    "(display a0)" ++
                    sequenceFromString Racket ("\n" ++ defn l) ++
                    argList Racket l n ++
                    sequenceFromString Racket (endDefn l ++ "\n") ++
                    "))"
...
</code></pre>
<p>Almost there. We declare a list of the languages we want to cycle through:</p>
<pre><code class="language-hs">langs = [ Haskell
        , Ruby
        , Perl
        , C
        , Python
        , Java
        , Rust
        , OCaml
        , Swift
        , Racket
        , Javascript
        ]
</code></pre>
<p>And now the magic. <code>langs'</code> contains an infinite list of the selected languages repeating over and over. First, we use <code>fromTo</code> to print a definition of <code>q</code> in the first language that, when called, prints a quine loop program in the second language. Then, we use <code>driver</code> to print the second line of the program, the call to <code>q</code>.</p>
<p>The <code>zipWith (fromTo n) ...</code> expression determines the arguments passed to <code>q</code>. It reduces to a list where the first element is <code>fromTo n</code> called on the second and third language, then on the third and fourth language, all the way back around to the last and first language. Recall that <code>fromTo</code> prints a definition of <code>q</code> in the first language passed to it. That definition, when called, prints a quine program in the second language passed to <code>fromTo</code>. So the arguments to <code>driver</code>, and therefore to the call to <code>q</code>, are:</p>
<ol>
<li>A definition of <code>q</code> in the second language that prints a quine loop program in the third language</li>
<li>A definition of <code>q</code> in the third language that prints a quine loop program in the third language</li>
<li>...</li>
<li>A definition of <code>q</code> in the last language that prints a quine loop program in the first language</li>
</ol>
<pre><code class="language-hs">main = do
    let n = length langs
    let langs' = cycle langs
    putStrLn $ fromTo n (head langs') (head (tail langs'))
    putStrLn $ driver (head langs') $
      zipWith (fromTo n)
        (take n (tail langs')) (tail (tail langs'))
</code></pre>
<p>Let's see why this works by considering a simpler case, when <code>langs = [Haskell, Javascript, Racket]</code>. <code>main</code> prints a quine loop program in Haskell that looks like this:</p>
<pre><code class="language-hs">q a0 a1 a2=putStrLn $ a0++map toEnum [10,114,40,34]++a1++map toEnum [34,44,34]++a2++map toEnum [34,44,34]++a0++map toEnum [34,41,59]
main = q "{definition of `q` in JavaScript}" "{definition of `q` in Racket}" "{definition of `q` in Haskell}"
</code></pre>
<p>This Haskell program prints the following JavaScript program:</p>
<pre><code class="language-js">{definition of `q` in JavaScript}
q("{definition of `q` in Racket}","{definition of `q` in Haskell}","{definition of `q` in JavaScript}");
</code></pre>
<p>Recall that <code>q</code> is always defined to print its first argument, then a call to <code>q</code> with arguments rotated one to the left. Therefore this prints the following Racket program:</p>
<pre><code class="language-racket">{definition of `q` in Racket}
(q "{definition of `q` in Haskell}" "{definition of `q` in JavaScript}" "{definition of `q` in Racket}")
</code></pre>
<p>Which prints a Haskell program:</p>
<pre><code class="language-hs">{definition of `q` in Haskell}
main = q "{definition of `q` in JavaScript}" "{definition of `q` in Racket}" "{definition of `q` in Haskell}"
</code></pre>
<p>But the definition of <code>q</code> in Haskell is just the first line of the generated Haskell program, closing the loop.</p>]]></description>
            <link>https://thomasbroadley.com/blog/understanding-quine-central-the-source-code/</link>
            <guid isPermaLink="false">understanding-quine-central-the-source-code</guid>
            <pubDate>Sun, 27 Sep 2020 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[RC day 5]]></title>
            <description><![CDATA[<p>Yesterday went so well I forgot to post about it! I started early, spending an hour trying to explain how <a href="https://github.com/dpiponi/quine-central"><code>quine-central</code></a> handles character escaping. Then I paired with a batchmate on <a href="https://github.com/tbroadley/narrated-diffs">Narrated Diffs</a> (fka Literate Diffs), which was extremely helpful. Together we had a brainstorm for improvements to the project, selected the ones necessary for an MLP (minimum loveable product), then implemented a feature (the ability to build a narrated diff from a GitHub PR URL).</p>
<p>Without that session I don’t think Narrated Diffs would be where it is now: <a href="https://narrated-diffs.thomasbroadley.com">a tool that you can actually use!</a> Paste a Git diff or a GitHub PR URL, then click “Narrate that diff!”. You can then reorder the diff’s chunks and add comments to them. When you’re done, copy the URL and send it to your reviewers. Tell a story with your PR and hopefully they’ll find it easier to review.</p>
<p>After that pairing session, I spent the rest of the day getting Narrated Diffs to an MLP. I created a Postgres database on my computer and got the backend to store diffs in it. Then I hosted the frontend and backend on a VPS, which took a while. I’ll post soon explaining in more depth the tech stack the project uses.</p>
<p>I wrapped up the day with technical talks. These are five-minute presentations by Recursers about projects they’ve been working on. First, a few RC staff members gave a presentation on <a href="https://www.recurse.com/manual#sub-sec-social-rules">RC’s four social rules</a>, complete with demonstrations and audience participation. Then I talked about what I’d learned about code review pain points this week and gave a demo of Narrative Diffs. I wish I’d spent more time preparing for my talk, oh well!</p>
<p>I really enjoyed the talks that others gave. One Recurser used Python’s <code>html.parser</code> module to solve FizzBuzz by scraping Answers.com for questions like, “Is 17 divisible by 5?” Another added tail recursion to a Python program by modifying its bytecode (as the presenter said, “Python has bytecode??”). The highlight was when an alumni used computer voice control software called <a href="https://talonvoice.com/">Talon</a> to live-code FizzBuzz right in front of us!</p>
<p>It’s been a really good week. I’m quite put out that it’s over. I’ll publish a return statement (RC’s cute term for a reflection on your time there) in the next few days.</p>]]></description>
            <link>https://thomasbroadley.com/blog/rc-day-5/</link>
            <guid isPermaLink="false">rc-day-5</guid>
            <pubDate>Sat, 26 Sep 2020 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[RC day 4]]></title>
            <description><![CDATA[<p>I spent a lot of the day trying to understand how <a href="https://github.com/dpiponi/quine-central"><code>quine-central</code></a> works. I think I got there! I published <a href="../understanding-quine-central-quine-loops">a post</a> explaining how the programs generated by <code>quine-central</code> work and I’ve started one that summarizes how <code>quine-central</code> generates them.</p>
<p>Along the way I made a few small improvements to my blog-generating software. I decided I much preferred the blogchain navigation I’d added over simply linking to a page with all posts under a tag, so I converted all posts with tags to use the former. (See the “RC Mini 7, 2020” above this post for an example.)</p>
<p>In the morning I had another coffee chat and one last discussion about code review, then started synthesizing the feedback from all those discussions. I hope to present my findings at the technical talks at the end of the day tomorrow.</p>
<p>Finally, I paired again on <a href="https://github.com/stephen/cssc"><code>cssc</code></a>. We added support for reducing one species of multi-term <code>calc</code> expression, ones like <code>calc(100% - 10px - 10px)</code> that have multiple terms with the same units next to each other. We might pair again tomorrow to get <code>cssc</code> to handle expressions like <code>calc(100px - 10% - 10px)</code> where the terms with the same units are separated.</p>
<p>Tomorrow I’ll also pair on Literate Diffs, work on a tech talk, and wrap up that second blog post on <code>quine-central</code>. It’s hard to believe tomorrow’s the last day of my batch. I’m going to get as much as I can out of my remaining time, then think about how I’d like to continue being a part in the RC community afterwards.</p>]]></description>
            <link>https://thomasbroadley.com/blog/rc-day-4/</link>
            <guid isPermaLink="false">rc-day-4</guid>
            <pubDate>Thu, 24 Sep 2020 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Understanding quine-central: how do quine loops work?]]></title>
            <description><![CDATA[<p>Yesterday another Recurser introduced me to <a href="https://github.com/dpiponi/quine-central"><code>quine-central</code></a>, which is:</p>
<blockquote>
<p>[A] Haskell program that generates a Haskell program that prints out a Perl program that prints out a Python program that prints out a Ruby program that prints out a C program that prints out a Java program that prints out a Rust program that prints out an OCaml program that prints out a Swift program that prints out a Racket program that prints out a Javascript program that prints out the first Haskell program generated.</p>
</blockquote>
<p>“How the hell does that work?” I thought to myself. Maybe you’re thinking that too, so here’s my attempt at an explanation.</p>
<p><code>quine-central</code> can produce quine loops of any length, so let’s first think about a loop of three programming languages: Haskell, Ruby, and C. In this case, <code>quine-central</code> prints a Haskell program that prints a Ruby program that prints a C program that prints the first Haskell program generated.</p>
<p class="image image-centered">
  <img src="/blog/understanding-quine-central-quine-loops/loop.jpg" alt="A loop of languages, going from Haskell to Ruby to C and back to Haskell.">
</p>
<p>The generated Haskell program has two lines. The first line defines a function called <code>q</code> that takes three arguments. <code>q</code> builds and returns a string that contains its first argument, then a newline, and finally some Ruby code that calls a function called <code>q</code>. This call to <code>q</code> in Ruby takes the same arguments but rotated one position to the left. That is, it takes the second argument to the Haskell <code>q</code>, then the third, then the first.</p>
<p class="image">
  <img src="/blog/understanding-quine-central-quine-loops/first-line.jpg" alt="A diagram explaining q&#x27;s implementation in Haskell. q takes three arguments: a0, a1, and a2. q returns a0 concatenated with a newline, then the string q(&#x22;, then a1, then the string &#x22;,&#x22;, then a2, then the string &#x22;,&#x22;, then a0, and finally the string &#x22;). Its output is the value of a0 on the first line, then a call to q in Ruby with the arguments a1, a2, and a0 on the second line.">
</p>
<p>In the actual output, <code>{a0}</code> is replaced with the value of <code>a0</code>. Same goes for the other variables. Also, this isn’t quite the actual code. I simplified it a little for demonstration purposes.</p>
<p>The generated Haskell program's second line is a main method that calls the function <code>q</code> defined on the first line and prints the result. Each argument passed to <code>q</code> is the source code for a definition of <code>q</code> in a language in the loop. The first argument is a definition of <code>q</code> in Ruby, the second in C, the last in Haskell.</p>
<pre><code class="language-hs">main = putStrLn $ q "{Ruby    definition of q}"
                    "{C       definition of q}"
                    "{Haskell definition of q}"
</code></pre>
<p>In all of these definitions, <code>q</code> does the same thing as it does in the Haskell program. It prints its first argument, then prints a call to a function called <code>q</code>, but in the next language in the loop. It also rotates its arguments one position to the left before printing them.</p>
<p>When the program is run, <code>q</code> starts by printing its first argument, which is a declaration of <code>q</code> in Ruby. Then, it prints a call to <code>q</code> in Ruby. The arguments to this call are the second, third, and first arguments passed to <code>q</code> in the Haskell program, which are definitions of <code>q</code> in C, Haskell, and Ruby respectively.</p>
<p>The output of the Haskell program is a Ruby program with a very similar structure. Both have two lines. Both declare a function <code>q</code> on the first line. <code>q</code> does the same thing in both programs. And both call <code>q</code> on the second line, passing in definitions of <code>q</code> for the rest of the loop.</p>
<p>When this Ruby program is run, it in turn prints a C program with the same structure. And that C program in turn prints a Haskell program with the same structure. In fact, it prints the original Haskell program, closing the loop.</p>
<p>In the next post, I’ll discuss how <code>quine-central</code> generates these programs in the first place. We’ll also do away with some of the simplifications I made to the programs in this post and look at how <code>quine-central</code> handles the problems posed by string escaping.</p>]]></description>
            <link>https://thomasbroadley.com/blog/understanding-quine-central-quine-loops/</link>
            <guid isPermaLink="false">understanding-quine-central-quine-loops</guid>
            <pubDate>Thu, 24 Sep 2020 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[RC day 3]]></title>
            <description><![CDATA[<p>I started the day by (surprise, surprise) fiddling with my <code>.vimrc</code>. I decided to discard <a href="https://github.com/nicwest/vim-workman"><code>vim-workman</code></a> and try out a more minimal set of key remappings, but I ran into problems with those too. Eventually I realized I was spending too much time on this and decided to get rid of all rebindings. So far it’s going OK! I’m working much more slowly than usual and making lots of mistakes (although fewer by the end of the day). I’ll try this approach for the rest of the week, with the goal of switching to Workman on my work computer next week.</p>
<p>I then discussed code review pain points with another current Recurser. He told me about some of the processes his company’s put in place to make sure PRs get reviewed by the right person. He also encouraged me to share the knowledge I’ve gathered from my discussions this week, either in a blog post or in a technical talk on Friday. I’ll likely do both, so watch this space!</p>
<p>Afterward, I spent some time polishing my <a href="https://github.com/tbroadley/literate-diffs">Literate Diffs</a> prototype, which you can now test out <a href="https://thomasbroadley.com/literate-diffs/">here</a>. Just paste in a Git diff (e.g. <a href="https://patch-diff.githubusercontent.com/raw/tbroadley/spellchecker-cli/pull/59.diff">this one</a>), then annotate and rearrange the chunks to your heart’s content. I also got feedback on the prototype from those I’ve discussed code review with this week.</p>
<p>Later in the day, I had another coffee chat with a current Recurser. We talked about our lives before RC, swapped our favourite technical articles, and went back and forth over the benefits and disadvantages of type safety in certain contexts. (My coffee chat partner had written some SVG-generating Elixir code and found it clunky to have to wrap an opacity percentage like 0.5 in an <code>Opacity</code> type before passing the result to an <code>opacity</code> function. I think it’s clunky too, for little gain.)</p>
<p>Finally, I spent a good chunk of the day pairing on changes to <a href="https://github.com/stephen/cssc"><code>cssc</code></a>, a CSS compiler written in Go, with its creator. Specifically, we refactored the code that simplifies <code>calc</code> expressions containing constants (e.g. <code>calc(2px + 2px)</code>) and discussed ways to fix a bug in that code.</p>
<p>Tomorrow I plan to pair more on <code>cssc</code>, have another coffee chat and a discussion about code review, and digest the notes I’ve taken from those discussions so far. After that I’m not sure! I could see myself working on Literate Diffs more, returning to Cryptopals, or picking up something new.</p>]]></description>
            <link>https://thomasbroadley.com/blog/rc-day-3/</link>
            <guid isPermaLink="false">rc-day-3</guid>
            <pubDate>Wed, 23 Sep 2020 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[RC day 2]]></title>
            <description><![CDATA[<p>
  I started the day by adding three new plugins to my Vim setup, after learning about them from a thread on RC’s Zulip:
</p>

<ol>
  <li>
    <a href="https://github.com/neoclide/coc.nvim"><code>coc.nvim</code></a> (language-specific autocomplete and jump to definition)
  </li>

  <li>
    <a href="https://github.com/junegunn/fzf.vim"><code>fzf.vim</code></a> (fuzzy search for anything, but I’m only using it to open files right now)
  </li>

  <li>
    <a href="https://github.com/tpope/vim-fugitive"><code>fugitive.vim</code></a> (Git commands)
  </li>
</ol>

<p>
  That took most of the morning, perhaps more time than I should have spent on it. I did learn about Vimscript and worked around one gotcha that’s good material for another post.
</p>

<p>
  Late in the morning I caught the end of daily check-ins. Participants take turns briefly explaining what they worked on yesterday and what they’re working on today. I’ll definitely be attending the entire meeting tomorrow: It was a great way to hear about interesting projects that others are working on. I also found it handy to be able to reference my “RC day 1” post while giving my check-in.
</p>

<p>
  After lunch I attended a workshop on pair programming. I’ve paired quite a bit before but still learned something new. For example, one benefit of pairing I hadn’t considered was that it’s harder to get distracted for minutes by social media when pairing. (I do still find myself getting distracted for 30 seconds at a time by Slack. Something for me to work on.)
</p>

<p>
  I also picked up a few new pairing tips:
</p>

<ul>
  <li>
    Swap roles every 8-15 minutes (the driver becomes the navigator and vice versa)
  </li>

  <li>
    Take short breaks every so often
  </li>

  <li>
    Don’t pair on a task that’s trivial for both people
  </li>

  <li>
    Focus on transferring and receiving knowledge instead of achieving a result in a set amount of time
  </li>
</ul>

<p>
  We then put those tips into practice by pairing with other Recursers to implement the Game of Life.
</p>

<p>
  After the workshop, I had a coffee chat with someone who’s been at RC for a few weeks already. She gave me some good advice: Even though my time at RC is flying by, the experience doesn’t end along with my batch. I can still attend study groups and other events after this week. And I’m already thinking about coming back for a six- or twelve-week batch.

<p>
  Early in the day, I posted on Zulip asking to chat with people about their experiences with code review. I hoped to figure out whether <a href="https://github.com/tbroadley/literate-diffs">Literate Diffs</a> solves a real problem. A few people expressed interest and I spoke with a couple of them late this afternoon. One had already noticed the exact problem that Literate Diffs aims to solve. The other had already solved the problem a different way at his company. They found it harder to build systems for determining who should review which PRs. Definitely food for thought.
</p>

<p>
  Somewhere along the way, I started a Google Doc containing interesting links that others had shared with me or posted on Zulip. Currently it contains Wikipedia articles, blog posts, and Amazon pages for a few books. After this week I’ll run through it and consolidate that knowledge somehow.
</p>

<p>
  I spent longer than I intended catching up on my RSS feed. I feel bad about the lost productivity, but maybe my brain needed the break. I’ll push myself a little harder tomorrow.
</p>

<p>
  Speaking of tomorrow! In the morning, I want to come up with a plan of attack for Literate Diffs and start executing against it. Right now, the best strategy seems to be fleshing out my old React prototype, then asking people to play around with it. I also want to pair again—I’ve signed up for a session with a Zulip bot that matches you with other people looking for pairing partners. If there’s time, I’ll try to get <a href="https://github.com/nicwest/vim-workman"><code>vim-workman</code></a> to play nice with macros.
</p>

<p>
  P.S. Writing this blog post made me realize how annoying it is to write HTML without macros. Tomorrow I'll also look at adding Markdown support to my blog generator.
</p>
]]></description>
            <link>https://thomasbroadley.com/blog/rc-day-2/</link>
            <guid isPermaLink="false">rc-day-2</guid>
            <pubDate>Tue, 22 Sep 2020 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[RC day 1]]></title>
            <description><![CDATA[<p>
  RC began with a tour of <a href="https://www.recurse.com/virtual-rc">Virtual RC</a>, an online space that emulates the physical RC experience with all its serendipitous conversations. Then I attended talks by RC employees about the program and how to get the most out of it. Finally we broke into small groups and I briefly met a few other current attendees.
</p>

<p>
  I found a study group following <a href="https://cryptopals.com/">Cryptopals</a>, a series of programming challenges that introduce you to real-world cryptography and breaking said crypto. I didn’t attend the group, but I solved the first three challenges using Clojure. I’ve never programmed in that language and haven’t used a Lisp in a while, so it took time to get through them. I might work on the problems more but probably not in Clojure. I like Lispy syntax but missed static types and couldn’t find high-quality documentation for the standard library.
</p>

<p>
  After that I looked at an old project called <a href="https://github.com/tbroadley/literate-diffs">Literate Diffs</a>. The pitch is literate programming for Git diffs. PR authors should be able to reorder chunks in their PRs and add commentary around them. I think this idea has the potential to make code review a lot easier for reviewers (with a little investment from authors). I might resurrect that project this week or tackle the idea from a different direction (a file format? A browser extension for GitHub and similar sites?).
</p>

<p>
  Honestly it was a slow day! <a href="../tags/workman">I’m switching from QWERTY to Workman</a> and still don’t have the hang of using Vim with this new layout. I’m using a package called <a href="https://github.com/nicwest/vim-workman"><code>vim-workman</code></a> to let me use my QWERTY muscle memory in normal mode, which is helping a lot. In fact, this afternoon, I opened a couple of PRs on that repo. One was a documentation improvement, the second a fix for an issue. I filed another issue that I might take a crack at solving tomorrow.
</p>

<p>
  I didn’t pair with anyone today. To hit that goal for the rest of the week, I’m going to have to put myself out there more than I did today. But working on <code>vim-workman</code> gave me some ideas for what to do this week. Maybe I can build some tools to make myself more productive as a programmer, then do a presentation on them at the end of the week. Or even present on my Workman journey and the software I’ve used to get here.
</p>
]]></description>
            <link>https://thomasbroadley.com/blog/rc-day-1/</link>
            <guid isPermaLink="false">rc-day-1</guid>
            <pubDate>Mon, 21 Sep 2020 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[My goals for RC]]></title>
            <description><![CDATA[<p>
This week I’m participating in a <a href="https://www.recurse.com">Recurse Center</a> mini-batch. RC had been on my radar for a while, but an old coworker of mine encouraged me to apply recently. Here are my goals for the week.
</p>

<h2>
  Blog everyday
</h2>

<p>
  I haven’t blogged as much as I’d like to in the past few months. RC is a good opportunity to get back into the habit. I’ll follow the example of a few folks I’ve seen on RC’s <a href="https://blaggregator.recurse.com/about/">Blaggregator</a> and post daily about what I’ve been working on. It seems like a good way to stay accountable to myself, celebrate my progress, and build memories of my time at RC.
</p>

<h2>
  Pair everyday
</h2>

<p>
  I’ve found out that I prefer coding alone and getting as little feedback as necessary, partly because I don’t take criticism well. I think this is a mistake. I could produce higher-quality work and grow more quickly if I collaborated more. So this week I’m going to do at least one pairing session with another Recurser per day. Maybe if I pair more regularly I’ll internalize that it’s more productive than working alone.
</p>

<h2>
  Do a talk
</h2>

<p>
  I found out that Recursers give talks on technical subjects every Friday evening. I’m going to give one to practice public speaking and to encourage myself to dive deeply into at least one topic while I’m at RC.
</p>

<h2>
  Have fun!
</h2>

<p>
  Modulo the goals above, I won’t force myself to do anything I don’t enjoy. Instead I’m going to follow my nose, work on things that interest me, and switch it up if I’m not having fun. This week I want to nurture my curiosity about computer science and my intrinsic motivation to program. If I start something interesting and give up halfway through, I can always pick it back up after RC.
</p>
]]></description>
            <link>https://thomasbroadley.com/blog/my-goals-for-rc/</link>
            <guid isPermaLink="false">my-goals-for-rc</guid>
            <pubDate>Sun, 20 Sep 2020 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Brushing my teeth]]></title>
            <description><![CDATA[<p>
  For a long time, my poor oral health has frustrated me and stressed me out. My attitude has been that, since I brush and floss regularly, it doesn’t make sense that my gums are inflamed and receding.
</p>

<p>
  I’ve realized that, when I say it doesn’t make sense, I mean it’s unfair. I put effort into oral hygiene and I don’t get the outcomes that my dentist promised. But fairness doesn’t matter. What matters is whether my teeth are healthy or not.
</p>

<p>
  So I’m committing to taking care of my mouth in ways that actually keep it healthy. (For example, I don’t brush my teeth methodically, which likely contributes to tartar build-up. Mindfulness while brushing is the solution.) And I’ll try to avoid this in other areas of my life. No more feeling sorry for myself while forgetting about the reality of the situation!
</p>
]]></description>
            <link>https://thomasbroadley.com/blog/brushing-my-teeth/</link>
            <guid isPermaLink="false">brushing-my-teeth</guid>
            <pubDate>Mon, 07 Sep 2020 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[PipedInputStream and PipedOutputStream gotchas]]></title>
            <description><![CDATA[<p>
  To do I/O in Java, you read from InputStreams and write to OutputStreams. Sometimes you want to connect the output of an OutputStream to the input of an InputStream. In my case, I wanted to upload a CSV (generated by writing to a given OutputStream) to Amazon S3 (using a class reading from an InputStream).
</p>

<p>
  I solved this problem using a <a href="https://docs.oracle.com/javase/7/docs/api/java/io/PipedInputStream.html">PipedInputStream</a> and <a href="https://docs.oracle.com/javase/7/docs/api/java/io/PipedOutputStream.html">PipedOutputStream</a>. Reading from a PipedInputStream returns bytes written to the connected PipedOutputStream. Here was the Kotlin code I ended up with:
</p>

<pre><code class="language-kotlin">// Create a PipedInputStream; automatically close it at the end of
// the lambda
PipedInputStream().use { inputStream ->

  // Run the given lambda in a new thread
  thread {

    // Create a PipedOutputStream and connect it to the
    // PipedInputStream; automatically close it at the end of the
    // lambda
    PipedOutputStream(inputStream).use { outputStream ->
      generateCsv(outputStream)
    }
  }

  uploadToS3(inputStream)
}</code></pre>

<p>
  These classes come with a couple of gotchas. First, you should write to the PipedOutputStream and read from the PipedInputStream on separate threads. (Each class’s documentation clearly states this, so this isn’t so much a gotcha as a case of me not reading the docs closely enough.) If you read and write on the same thread, you might encounter a deadlock.
</p>

<p>
  The deadlock’s symptoms depend on whether your single-threaded code reads before it writes or vice versa. If it reads from the PipedInputStream first, it’ll hang forever waiting for something to write to the PipedOutputStream. However, if it writes to the PipedOutputStream first, you might not see any symptoms initially. In my case, I wrote a passing test that generated a small CSV and uploaded it to an S3 mock. However, when the code ran in production, it generated part of the CSV, then looped forever.
</p>

<p>
  The problem is buffering. PipedInputStreams buffer 1,024 bytes by default. Like I did, you might also wrap the former in a BufferedReader or the latter in a BufferedWriter, which default to using 8,192-byte buffers. As long as the data you write fit into the largest buffer in the stream, you won’t notice any problems. Writing won’t block because the buffer can hold all the written bytes. Then the PipedInputStream can read all the data you wrote. But as soon as you write enough data to fill the buffer, your write will block and you’ll encounter a deadlock.
</p>

<p>
  As the code above demonstrates, the solution is to read on one thread and write on another. That way, reading and writing can block without preventing the other operation from making progress.
</p>

<p>
  After realizing this, I encountered the second gotcha. My code initially called <code>generateCsv</code> on the main thread and <code>uploadToS3</code> on the thread created by <code>thread</code>. The issue is that, when <code>generateCsv</code> finishes, the main thread returns from the <code>use</code> block associated with the PipedInputStream. This closes the PipedInputStream even if <code>uploadToS3</code> is in the middle of reading from it. In my case, I noticed that the CSV file written to the S3 mock was truncated.
</p>

<p>
  To solve this problem, read on the main thread and write on the newly-created thread. This way, the PipedInputStream doesn’t close until <code>uploadToS3</code> has read everything from it.
</p>

<p>
  It took me a few hours to figure out what are in retrospect a couple of simple mistakes. My main takeaway is that I need to read documentation more carefully. I should also spend more time getting to know Java’s I/O primitives better.
</p>
]]></description>
            <link>https://thomasbroadley.com/blog/pipedinputstream-and-pipedoutputstream-gotchas/</link>
            <guid isPermaLink="false">pipedinputstream-and-pipedoutputstream-gotchas</guid>
            <pubDate>Sat, 18 Jul 2020 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Grayscale screens]]></title>
            <description><![CDATA[<p>
  About a year ago I noticed that a coworker of mine had configured his phone’s screen to display everything in grayscale. He told me his goal was to make the screen less interesting to look at, to reduce the temptation to spend a lot of time looking at it. That convinced me to also switch my phone to grayscale.
</p>

<p>
  A year in, I’m not sure if the change has had much effect. I still spend a lot of time on my phone. I’ve had more success reducing that amount of time by disabling or uninstalling apps I spend a lot of time on. But whenever I disable grayscale mode, I’m shocked by how vibrant and interesting the colours are, so I think it’s had at least a small impact.
</p>

<p>
  Today I installed <a href="https://github.com/laerne/desaturate_all"><code>desaturate_all</code></a>, a Gnome extension that enables grayscale mode for Ubuntu. I suppose my goal is the same: to make my laptop less interesting to look at. Mainly I hope I’ll interact differently with sites like Reddit. If I make their content less flashy and visually interesting, maybe I’ll spend less time on them.
</p>

<p>
  I’ve also considered purchasing a phone or a monitor with an e-ink screen. These screens both enforce grayscale (although colour e-ink displays are also available) and don’t strain the eyes as much as LCDs. I considered purchasing a Kingrow K1 e-ink smartphone, but was deterred by the lack of Google Play support and the difficulty of getting it shipped to Canada. Searching again, the Hisense A5 looks like a more promising option that I’ll have to investigate further.
</p>
]]></description>
            <link>https://thomasbroadley.com/blog/grayscale-screens/</link>
            <guid isPermaLink="false">grayscale-screens</guid>
            <pubDate>Sat, 11 Jul 2020 05:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Using Workman]]></title>
            <description><![CDATA[<p>
  On May 12, I completed my first lessons using the <a href="https://workmanlayout.org/">Workman keyboard layout</a> on <a href="https://www.keybr.com/">Keybr</a>. On May 25, I started practicing seriously, spending 15 minutes a day each day from then until June 11. By June 9 I’d learned all the new layout’s letter keys.
</p>

<p>
  As I thought I might in my last post, on June 13, I started practicing using <a href="https://www.typingclub.com">TypingClub</a> instead of Keybr. I hoped that typing real words and sentences only would help me build word-level muscle memory faster. TypingClub also trains me on capital letters and punctuation. Keybr can train you on these too, and more intensely than TypingClub: Every word can be capitalized or end with punctuation. However I thought I’d learn these keys more quickly by using them in real-world contexts.
</p>

<p class="image">
  <img src="/blog/using-workman/typingclub-lesson.jpg" alt="A screenshot of a TypingClub lesson about African languages. The first two sentences of the passage are visible. The first sentence has already been typed. Letters typed correctly the first time are highlighted in green, those typed incorrectly and then correctly in yellow. A bar at the bottom shows my progress through the lesson.">
</p>

<p>
  TypingClub is an OK resource for those learning to type. It offers a full course in touch-typing but I skipped ahead to its advanced lessons, which involve typing a three-to-five-sentence biography of a person or summary of a concept. The website’s clearly aimed towards students: The lessons use a middle- or high-school reading level and some are about plagiarism and online bullying. It’s also focused on Western culture, with many lessons on American historical figures, authors, and politics. I found the lesson UI, which shows how fast you type each word and your speed and accuracy for the current lesson, pretty distracting and hid most of these UI elements using uBlock Origin. Overall TypingClub is useful but I imagine better services exist for adults.
</p>

<p>
  On June 23 I had a scare. As I wrote in my journal, “I thought I’d totally lost my QWERTY muscle memory. I did some typing practice, then switched back to QWERTY [...] and found it really difficult to type accurately.” Luckily, after an hour or so, my QWERTY muscle memory came back. This incident taught me not to practice Workman right before work. Another time I did so, I typed slower and less accurately than usual for most of the workday. By contrast, this morning I practiced Workman, then showered and went for a walk. I started work an hour after I finished practicing and had no trouble using QWERTY.
</p>

<p>
  I haven’t been as diligent about practicing daily with TypingClub as I was with Keybr. I missed a couple of days in mid-June and four last week (partly because I went on vacation without a computer). Still, I’ve increased my Workman typing speed by about 13 words per minute (wpm) in the past month:
</p>

<p class="image">
  <img src="/blog/using-workman/typing-speed-graph.jpg" alt="A graph of my Workman typing speed over the past month. Each data point is the speed at which I typed when taking together all lessons completed on that day. A linear trendline with R2 = 0.655 goes from about 39 wpm on June 13 to about 52 wpm on July 10.">
</p>

<p>
  Unfortunately this is faster than my real-world typing speed. I find I type faster when I can always see the next letter I need to type, as with Keybr and TypingClub but not when typing a chat message. But the change in speed feels roughly accurate. I think a small amount of this increase comes from higher accuracy but most is from improved muscle memory, both at the three-or-four-letter sequence level and at the word level.
</p>

<p>
  My speed isn’t improving as quickly as I’d like, which is why on July 5 I started using Workman full-time on my personal computer. So far it’s been slow going. I still haven’t found a way to use the same keyboard layout across all programs. My current solution affects Firefox and Discord but not my terminal emulator or Ubuntu settings. As I discovered, it’s difficult to switch quickly between layouts, so I need to find a better solution. I also discovered that the Workman keymap I’m using has a couple of bugs: the Caps Lock key is bound to both caps lock and backspace, and the left arrow key doesn’t work at all. The keymap is open-source so I’ll contribute the fixes back to the original project if I fix these issues before finding a different way to use Workman on Ubuntu (a friend of mine suggested a programmable keyboard).
</p>

<p>
  I’m still a ways from using Workman at work. I’m currently relearning common shortcuts like opening and closing new tabs, and even copy and paste. More importantly, I haven’t figured out how to avoid disrupting my Vim muscle memory. I’ll definitely rebind HJKL (equivalents for the arrow keys) to YNEO (the letters on the Workman keyboard triggered by the same keys as HJKL on QWERTY). But should I also rebind often-used Vim keys like I, A, Y, and P so that they don’t change position, or should I relearn the positions and keep the mnemonic key bindings (Insert, Append, Yank, and Paste respectively)? I haven’t decided yet.
</p>

<p>
  In any case, I’ll keep using Workman, with the goal of using it at work too. It’s subjective and potentially biased, but this keyboard layout does feel easier on my hands than QWERTY. I typed this blog post using Workman: Here’s to many more.
</p>

<p>
  P.S.: Here are two fun facts. First, this whole process hasn’t affected my phone-typing muscle memory at all. (It makes sense: Typing Workman on a keyboard is much more like typing QWERTY on a keyboard than typing QWERTY on a phone.) Second, it’s quite difficult to type the word “QWERTY” using Workman… Someday I’ll build the word-level muscle memory for it.
</p>
]]></description>
            <link>https://thomasbroadley.com/blog/using-workman/</link>
            <guid isPermaLink="false">using-workman</guid>
            <pubDate>Fri, 10 Jul 2020 05:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>